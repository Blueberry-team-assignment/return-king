# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 플러터 설치 
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
      
        # 파이어베이스 설정파일 생성
      - name: Create firebase_options.dart
        run: |
          echo "import 'package:firebase_core/firebase_core.dart';" > lib/firebase_options.dart
          echo "class DefaultFirebaseOptions {" >> lib/firebase_options.dart
          echo "  static const FirebaseOptions currentPlatform = FirebaseOptions(" >> lib/firebase_options.dart
          echo "    apiKey: '${{ secrets.FIREBASE_API_KEY }}'," >> lib/firebase_options.dart
          echo "    authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}'," >> lib/firebase_options.dart
          echo "    projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'," >> lib/firebase_options.dart
          echo "    storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}'," >> lib/firebase_options.dart
          echo "    messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}'," >> lib/firebase_options.dart
          echo "    appId: '${{ secrets.FIREBASE_APP_ID }}'," >> lib/firebase_options.dart
          echo "  );" >> lib/firebase_options.dart
          echo "}" >> lib/firebase_options.dart
  
      # 라이브러리 설치
      - name: Install dependencies
        run: dart pub get

      # dotenv파일 생성
      - name: Set environment variables
        run: echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env


      # 프로젝트 소스 분석
      - name: Analyze project source
        run: dart analyze

      # 테스트 실행
      - name: Run tests
        run: flutter test
